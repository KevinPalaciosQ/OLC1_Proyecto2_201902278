/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AST = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,13],$V2=[1,27],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,22],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,21],$Ve=[2,5,17,18,21,26,27,36,39,41,43,46,49,50,51,52,53,94],$Vf=[1,34],$Vg=[1,40],$Vh=[1,45],$Vi=[48,55],$Vj=[2,51],$Vk=[1,63],$Vl=[1,70],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,64],$Vr=[1,65],$Vs=[1,68],$Vt=[1,69],$Vu=[1,71],$Vv=[1,78],$Vw=[1,77],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,98],$VB=[1,104],$VC=[1,103],$VD=[1,105],$VE=[1,106],$VF=[1,107],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[8,24,42,55,67,68,69,70,71,74,75,76,77,78,79,80,81,82,95],$VQ=[2,5,17,18,21,22,26,27,36,37,39,41,43,46,49,50,51,52,53,94],$VR=[8,24,42,55,74,75,81,82,95],$VS=[8,24,42,55,67,68,74,75,76,77,78,79,80,81,82,95],$VT=[8,24,42,55,74,75,76,77,78,79,80,81,82,95],$VU=[26,41,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"PUNTOYCOMA":8,"ASIGNACION":9,"FUNCIONCOUT":10,"INSTRUCCIONFOR":11,"WHILEINS":12,"CICLODOWHILE":13,"SENTENCIAIF":14,"SENTENCIASWITCH":15,"AUMENTODECRE":16,"INVALID":17,"IDENTIFICADOR":18,"INCREMENTO":19,"DECREMENTO":20,"RESERVADAWHILE":21,"PARABRE":22,"EXPRESION":23,"PARCIERRA":24,"LLAVEABRE":25,"LLAVECIERRA":26,"RDO":27,"ENCAPSULAMIENTO":28,"INSTRUCCIONCONTINUE":29,"CONTINUE":30,"INSTRUCCIONBREAK":31,"RBREAK":32,"INSTRUCCIONRETURN":33,"RETURN":34,"OPCIONES":35,"RESERVADAIF":36,"RESELSE":37,"LISTA_IF":38,"SWITCH":39,"LISTACASOS":40,"RDEFAULT":41,"DOSPUNTOS":42,"CASE":43,"TIPOSFOR":44,"ACTUALIZACIONFOR":45,"RFOR":46,"LISTA_IDENTIFICADORES":47,"IGUAL":48,"R_INT":49,"R_DOUBLE":50,"R_BOOL":51,"R_CHAR":52,"R_CADENA":53,"FUNCIONCASTEO":54,"COMA":55,"OPERACIONES":56,"OPERACIONESLOGICAS":57,"OPERACIONESRELACIONALES":58,"ENTERO":59,"CADENA":60,"DECIMAL":61,"CARACTER":62,"R_TRUE":63,"R_FALSE":64,"FUNCIONESVARIAS":65,"OPERADORTERNARIO":66,"MENOS":67,"MAS":68,"MULTIPLICACION":69,"DIVISION":70,"MODULO":71,"POTENCIA":72,"NOT":73,"OR":74,"AND":75,"MAYORIGUAL":76,"MAYOR":77,"MENORIGUAL":78,"MENOR":79,"IGUALDAD":80,"DIFERENTE":81,"INTERROGACION":82,"TIPODECLARACION":83,"FUNCIONESTRUCTURADATOS":84,"VECTORES":85,"ACCESOVECTORES":86,"MODIFICACIONVECTORES":87,"TIPOVECTOR":88,"CORCHETEABRE":89,"CORCHETECIERRA":90,"NEW":91,"LISTAVALORES":92,"ID":93,"COUT":94,"MDOBLE":95,"ENDL":96,"FUNCIONTOUPPER":97,"FUNCIONTOLOWER":98,"FUNCIONROUND":99,"FUNCIONTYPEOF":100,"FUNCIONTOSTRING":101,"RTOLOWER":102,"RTOUPPER":103,"ROUND":104,"FUNCIONLENGHT":105,"PUNTO":106,"LENGTH":107,"TYPEOF":108,"CASTEO":109,"TOSTRING":110,"FUNCIONCSTR":111,"C_STR":112,"FUNCIONEXECUTE":113,"EXECUTE":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOYCOMA",17:"INVALID",18:"IDENTIFICADOR",19:"INCREMENTO",20:"DECREMENTO",21:"RESERVADAWHILE",22:"PARABRE",24:"PARCIERRA",25:"LLAVEABRE",26:"LLAVECIERRA",27:"RDO",30:"CONTINUE",32:"RBREAK",34:"RETURN",36:"RESERVADAIF",37:"RESELSE",39:"SWITCH",41:"RDEFAULT",42:"DOSPUNTOS",43:"CASE",46:"RFOR",48:"IGUAL",49:"R_INT",50:"R_DOUBLE",51:"R_BOOL",52:"R_CHAR",53:"R_CADENA",55:"COMA",59:"ENTERO",60:"CADENA",61:"DECIMAL",62:"CARACTER",63:"R_TRUE",64:"R_FALSE",67:"MENOS",68:"MAS",69:"MULTIPLICACION",70:"DIVISION",71:"MODULO",72:"POTENCIA",73:"NOT",74:"OR",75:"AND",76:"MAYORIGUAL",77:"MAYOR",78:"MENORIGUAL",79:"MENOR",80:"IGUALDAD",81:"DIFERENTE",82:"INTERROGACION",89:"CORCHETEABRE",90:"CORCHETECIERRA",91:"NEW",93:"ID",94:"COUT",95:"MDOBLE",96:"ENDL",102:"RTOLOWER",103:"RTOUPPER",104:"ROUND",106:"PUNTO",107:"LENGTH",108:"TYPEOF",109:"CASTEO",110:"TOSTRING",112:"C_STR",114:"EXECUTE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[16,3],[16,3],[12,7],[13,7],[29,1],[31,1],[33,1],[33,2],[28,3],[28,2],[14,5],[14,7],[14,6],[14,8],[38,5],[38,4],[15,7],[15,10],[15,9],[40,5],[40,4],[44,1],[44,1],[45,2],[45,2],[45,1],[11,9],[9,3],[7,4],[7,4],[7,4],[7,4],[7,4],[35,1],[35,1],[47,3],[47,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,6],[56,3],[57,2],[57,3],[57,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[66,5],[54,4],[83,1],[83,1],[83,1],[83,1],[84,1],[84,1],[84,1],[85,11],[85,15],[85,9],[88,1],[88,1],[88,1],[88,1],[92,1],[86,4],[87,7],[87,10],[10,6],[10,4],[65,1],[65,1],[65,1],[65,1],[65,1],[98,4],[97,4],[99,4],[105,6],[100,4],[101,5],[111,6],[113,5],[113,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new Nodo.default("INICIO","");
                                            this.$.agregarHijo($$[$0-1]);
                                            return this.$;
                                            
break;
case 2:
this.$= new Nodo.default("INSTRUCCIONES","");
                                    this.$.agregarHijo($$[$0-1]);
                                    this.$.agregarHijo($$[$0]);
                                
break;
case 3:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                this.$.agregarHijo($$[$0]);
                                                
break;
case 4:
this.$=new Nodo.default("DECLARACION","");
                                            this.$.agregarHijo($$[$0-1]);
                                            
break;
case 5:
this.$=new Nodo.default("ASIGNACION","");
                                        this.$.agregarHijo($$[$0-1]);
                                        return this.$;
                                        
break;
case 6:
this.$=new Nodo.default("INSTRUCCION","");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 7:
this.$=new Nodo.default("INSTRUCCIONFOR","");
                                        this.$.agregarHijo($$[$0]);
                                        return this.$;
break;
case 8:
this.$=new Nodo.default("WHILEINS","");
                                        this.$.agregarHijo($$[$0]);
                                        return this.$;
break;
case 9:
this.$=new Nodo.default("CICLODOWHILE","");
                                        this.$.agregarHijo($$[$0]);
                                        return this.$;
break;
case 10:
this.$=new Nodo.default("INSTRUCCIONES","");
                                        this.$.agregarHijo($$[$0]);
                                        return this.$;
break;
case 11:
this.$=new Nodo.default("SENTENCIASWITCH","");
                                        this.$.agregarHijo($$[$0]);
                                        return this.$;
break;
case 12:
this.$=new Nodo.default("AUMENTODECRE","");
                                        this.$.agregarHijo($$[$0]);
                                        return this.$;
break;
case 13:
this.$=new Nodo.default("INSTRUCCIONES","");
                                        this.$.agregarHijo(new Nodo.default("ERROR LEXICO",""));
                                        
break;
case 14:
this.$=new Nodo.default("INSTRUCCIONES","");
                                        this.$.agregarHijo(new Nodo.default("ERROR SEMANTICO",""));
                                        this.$.agregarHijo(new Nodo.default(";","PUNTOYCOMA"));
                                        
break;
case 23:
this.$=new Nodo.default("ENCAPSULAMIENTO", "");
                                                                            this.$.agregarHijo(new Nodo.default("{", "LLAVEA"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default("}", "LLAVEC"));
                                                                            
break;
case 24:
this.$=new Nodo.default("ENCAPSULAMIENTO", "");
                                                                            this.$.agregarHijo(new Nodo.default("{", "LLAVEA"));
                                                                            this.$.agregarHijo(new Nodo.default("}", "LLAVEC"));
                                                                            
break;
case 25:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 26:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-4]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default("else","RELSE"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 27:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 28:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default("else","RELSE"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 29:
this.$ = new Nodo.default("LISTA IF","");
                                                                            this.$.agregarHijo($$[$0-4]);
                                                                            this.$.agregarHijo(new Nodo.default("elseif","ELSEIF"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$01]);
                                                                            
break;
case 30:
this.$ = new Nodo.default("LISTA IF","");
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$01]);
                                                                            
break;
case 31:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVECIERRA"));
                                                                                                                    
break;
case 32:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-7]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("default","RDEFAULT"));
                                                                                                                    this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVECIERRA"));
                                                                                                                    
break;
case 33:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-6]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                    this.$.agregarHijo($$[$0-3]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("default","RDEFAULT"));
                                                                                                                    this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                                                    this.$.agregarHijo($$[$0]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                    
break;
case 34:
this.$= new Nodo.default("LISTACASOS","");
                                                                            this.$.agregarHijo($$[$0-4]);
                                                                            this.$.agregarHijo(new Nodo.default("case","CASE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 35:
this.$= new Nodo.default("LISTACASOS","");
                                                                            this.$.agregarHijo(new Nodo.default("case","CASE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 43:
this.$=new Nodo.default("DECLARACION","");
                                                                                                            this.$.agregarHijo($$[$0-3]);
                                                                                                            this.$.agregarHijo(new Nodo.default("ENTERO","int"));
                                                                                                            this.$.agregarHijo($$[$0-2]);
                                                                                                            this.$.agregarHijo(new Nodo.default("IGUAL","="));
                                                                                                            this.$.agregarHijo($$[$0]);
                                                                                                            
break;
case 44:
this.$=new Nodo.default("DECLARACION","");
                                                                                                            this.$.agregarHijo($$[$0-3]);
                                                                                                            this.$.agregarHijo(new Nodo.default("Double","double"));
                                                                                                            this.$.agregarHijo($$[$0-2]);
                                                                                                            this.$.agregarHijo(new Nodo.default("IGUAL","="));
                                                                                                            this.$.agregarHijo($$[$0]);
                                                                                                            
break;
case 48:
this.$=new Nodo.default("OPCIONES","");//aca empieza a fallar
                        this.$.agregarHijo($$[$0]);
                        return this.$;
                        
break;
case 49:
this.$=new Nodo.default("OPCIONES","");//AHORA FUNCIONA PERO NO SUBE
                        this.$.agregarHijo($$[$0]);
                        return this.$;
                        
break;
case 50:
this.$=new Nodo.default("LISTA_IDENTIFICADORES", "");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(",", "COMA"));
                                                                            this.$.agregarHijo(new Nodo.default($$[$0], "IDENTIFICADOR"));
                                                                            
break;
case 51:
this.$=new Nodo.default("LISTA_IDENTIFICADORES", "");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0], "IDENTIFICADOR"));
                                                                            
break;
case 52:
this.$ = new Nodo.default("OPERACIONES",""); 
                                        this.$.agregarHijo($$[$0]);
break;
case 53:
this.$ = new Nodo.default("OPERACIONESLOGICAS",""); 
                                            this.$.agregarHijo($$[$0]);
break;
case 54:
this.$ = new Nodo.default("OPERACIONESRELACIONALES","");
                                            this.$.agregarHijo($$[$0]);
                                            
break;
case 55:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"ENTERO"));
break;
case 56:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"CADENA"));
break;
case 57:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"DECIMAL"));
break;
case 58:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"CARACTER"));
break;
case 59:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"IDENTIFICADOR"));
break;
case 60:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"TRUE"));
break;
case 61:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"FALSE"));
break;
case 62:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"FUNCIONESVARIAS"));
break;
case 63:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"OPERADORTERNARIO"));
break;
case 64:
this.$ = new Nodo.default("OPERACIONES","");
                                                                            this.$.agregarHijo(new Nodo.default("-","NEGATIVO"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 65:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("+","MAS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 66:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("-","MENOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 67:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("*","MULTIPLICACION"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 68:
this.$ = new Nodo.default("/","DIVISION");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("+","MAS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 69:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("%","MODULO"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 70:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-5]);
                                                                            this.$.agregarHijo(new Nodo.default("^","POW"));
                                                                            this.$.agregarHijo($$[$0-3]);
                                                                            
break;
case 71:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
case 72:
this.$ = new Nodo.default("OPERACIONESLOGICAS","");
                                                                            this.$.agregarHijo(new Nodo.default("!","NOT"));
                                                                            this.$.agregarHijo($$[$01]);
                                                                            
break;
case 73:
this.$ = new Nodo.default("OPERACIONESLOGICAS","");
                                                                            this.$.agregarHijo(new Nodo.default("||","OR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 74:
this.$ = new Nodo.default("OPERACIONESLOGICAS","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("&&","AND"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 75:
this.$ = new Nodo.default("OPERACIONESRELACIONALES","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("=>","MAYOR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 76:
this.$ = new Nodo.default("OPERACIONESRELACIONALES","");
                                                                           this.$.agregarHijo($$[$0-2]);
                                                                           this.$.agregarHijo(new Nodo.default(">","MAYORIGUAL"));
                                                                           this.$.agregarHijo($$[$0]);
                                                                           
break;
case 77:
this.$ = new Nodo.default("OPERACIONESRELACIONALES","");
                                                                           this.$.agregarHijo($$[$0-2]);
                                                                           this.$.agregarHijo(new Nodo.default("<=","MENORIGUAL"));
                                                                           this.$.agregarHijo($$[$0]);
                                                                            
break;
case 78:
this.$ = new Nodo.default("OPERACIONESRELACIONALES","");
                                                                          this.$.agregarHijo($$[$0-2]);
                                                                          this.$.agregarHijo(new Nodo.default("<","MENOR"));
                                                                          this.$.agregarHijo($$[$0]);
                                                                            
break;
case 79:
this.$ = new Nodo.default("OPERACIONESRELACIONALES","");
                                                                          this.$.agregarHijo($$[$0-2]);
                                                                          this.$.agregarHijo(new Nodo.default("==","IGUALDAD"));
                                                                          this.$.agregarHijo($$[$0]);
                                                                            
break;
case 80:
this.$ = new Nodo.default("OPERACIONESRELACIONALES","");
                                                                          this.$.agregarHijo($$[$0-2]);
                                                                          this.$.agregarHijo(new Nodo.default("!=","DIFERENTE"));
                                                                          this.$.agregarHijo($$[$0]);
                                                                            
break;
case 82:
this.$= new Nodo.default("FUNCIONCASTEO","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 83:
this.$=new Nodo.default("TIPODECLARACION","");//FUNCIONA PERO NO SUBE 
                                                                            this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                            
break;
case 84:
this.$=new Nodo.default("TIPODECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("double","DOUBLE"));
                                                                            
break;
case 85:
this.$=new Nodo.default("TIPODECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("char","CARACTER"));
                                                                            
break;
case 86:
this.$=new Nodo.default("TIPODECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("cadena","CADENA"));
                                                                            
break;
case 101:
this.$=new Nodo.default("FUNCIONCOUT","");//FUNCIONA PERFECTAMENTE
                                                                            this.$.agregarHijo(new Nodo.default("cout","COUT"));
                                                                            this.$.agregarHijo(new Nodo.default("<<","MDOBLE"));
                                                                            this.$.agregarHijo($$[$0-3]);
                                                                            this.$.agregarHijo(new Nodo.default("<<","MDOBLE"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PUNTOYCOMA"));
                                                                            
break;
case 102:
this.$=new Nodo.default("FUNCIONCOUT","");
                                                                            this.$.agregarHijo(new Nodo.default("cout","COUT"));
                                                                            this.$.agregarHijo(new Nodo.default("<<","MDOBLE"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PUNTOYCOMA"));
                                                                            
break;
case 103:
this.$=new Nodo.default("FUNCIONTOUPPER","");//----------------------------------------DEBE REVISARSE
                        this.$.agregarHijo($$[$0]);
                        return this.$;
                        
break;
case 104:
this.$=new Nodo.default("FUNCIONTOLOWER","");
                        this.$.agregarHijo($$[$0]);
                        return this.$;
                        
break;
case 105:
this.$=new Nodo.default("FUNCIONROUND","");
                        this.$.agregarHijo($$[$0]);
                        return this.$;
                        
break;
case 106:
this.$=new Nodo.default("FUNCIONTYPEOF","");
                        this.$.agregarHijo($$[$0]);
                        return this.$;
                        
break;
case 107:
this.$=new Nodo.default("FUNCIONTOSTRING","");
                        this.$.agregarHijo($$[$0]);
                        return this.$;
                        
break;
case 108:
this.$= new Nodo.default("FUNCIONTOLOWER","");//--------------------------FUNCIONA PERO DEBE SUBIR
                                                                            this.$.agregarHijo(new Nodo.default("TOLOWER",""));
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
case 109:
this.$= new Nodo.default("FUNCIONTOUPPER","");//--------------------------FUNCIONA PERO DEBE SUBIR
                                                                            this.$.agregarHijo(new Nodo.default("TOUPPER",""));
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
case 110:
this.$= new Nodo.default("FUNCIONROUND","");//--------------------------FUNCIONA PERO DEBE SUBIR
                                                                            this.$.agregarHijo(new Nodo.default("ROUND",""));
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
case 112:
this.$= new Nodo.default("FUNCIONTYPEOF","");//--------------------------FUNCIONA PERO DEBE SUBIR
                                                                            this.$.agregarHijo(new Nodo.default("TYPEOF",""));
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
case 113:
this.$= new Nodo.default("FUNCIONTOSTRING","");//--------------------------FUNCIONA PERO DEBE SUBIR
                                                                            this.$.agregarHijo(new Nodo.default("std:: toString",""));
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{1:[3]},{2:$V0,5:[1,28],6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},o($Ve,[2,3]),{8:[1,30]},{8:[1,31]},o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{8:[1,32]},{18:$Vf,47:33},{18:$Vf,47:35},{18:$Vf,47:36},{18:$Vf,47:37},{18:$Vf,47:38},{48:[1,39],55:$Vg},{95:[1,41]},{22:[1,42]},{22:[1,43]},{25:$Vh,28:44},{22:[1,46]},{22:[1,47]},o($Vi,$Vj,{19:[1,48],20:[1,49]}),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,14]),{48:[1,50],55:$Vg},o($Vi,$Vj),{48:[1,51],55:$Vg},{48:[1,52],55:$Vg},{48:[1,53],55:$Vg},{48:[1,54],55:$Vg},{18:$Vk,22:$Vl,23:55,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:[1,82]},{18:$Vk,22:$Vl,23:83,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{7:85,9:86,18:$Vf,44:84,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc},{18:$Vk,22:$Vl,23:87,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{21:[1,88]},{2:$V0,4:89,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,26:[1,90],27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{18:$Vk,22:$Vl,23:91,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:92,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{8:[1,93]},{8:[1,94]},{18:$Vk,22:$VA,23:96,35:95,54:97,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$VA,23:96,35:99,54:97,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$VA,23:96,35:100,54:97,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$VA,23:96,35:101,54:97,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$VA,23:96,35:102,54:97,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},o([8,24],[2,42],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO}),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54]),o($VP,[2,55]),o($VP,[2,56]),o($VP,[2,57]),o($VP,[2,58]),o($VP,[2,59]),o($VP,[2,60]),o($VP,[2,61]),o($VP,[2,62]),o($VP,[2,63]),{18:$Vk,22:$Vl,23:117,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{22:[1,118]},{18:$Vk,22:$Vl,23:119,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:120,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107]),{22:[1,121]},{22:[1,122]},{22:[1,123]},{22:[1,124]},{110:[1,125]},o($Vi,[2,50]),{8:[1,127],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO,95:[1,126]},{8:[1,128]},{8:[2,36]},{8:[2,37]},{24:[1,129],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{22:[1,130]},{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,26:[1,131],27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},o($VQ,[2,24]),{24:[1,132],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{24:[1,133],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($Ve,[2,15]),o($Ve,[2,16]),{8:[2,43]},{8:[2,48],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{8:[2,49]},{18:$Vk,22:$Vl,23:119,49:[1,135],50:[1,136],52:[1,137],53:[1,138],56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,83:134,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{8:[2,44]},{8:[2,45]},{8:[2,46]},{8:[2,47]},{18:$Vk,22:$Vl,23:139,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:140,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:141,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:142,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:143,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:144,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:145,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:146,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:147,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:148,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:149,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:150,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:151,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:152,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},o($VP,[2,64]),{18:$Vk,22:$Vl,23:153,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{24:[1,154],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($VR,[2,72],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{18:$Vk,22:$Vl,23:155,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:156,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:157,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:158,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{22:[1,159]},{96:[1,160]},o($Ve,[2,102]),{18:$Vk,22:$Vl,23:161,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{25:[1,162]},{18:$Vk,22:$Vl,23:163,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},o($VQ,[2,23]),{25:$Vh,28:164},{25:[1,165]},{24:[1,166]},{24:[2,83]},{24:[2,84]},{24:[2,85]},{24:[2,86]},o($VS,[2,65],{69:$VD,70:$VE,71:$VF}),o($VS,[2,66],{69:$VD,70:$VE,71:$VF}),o($VP,[2,67]),o($VP,[2,68]),o($VP,[2,69]),o([8,24,42,55,74,82,95],[2,73],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN}),o([8,24,42,55,74,75,82,95],[2,74],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN}),o($VT,[2,75],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VT,[2,76],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VT,[2,77],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VT,[2,78],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o([8,24,42,55,74,75,80,81,82,95],[2,79],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VR,[2,80],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{42:[1,167],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{55:[1,168],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($VP,[2,71]),{24:[1,169],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{24:[1,170],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{24:[1,171],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{24:[1,172],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{18:$Vk,22:$Vl,23:173,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{8:[1,174]},{8:[1,175],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{2:$V0,4:176,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{24:[1,177],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($Ve,[2,25],{38:179,22:[1,180],37:[1,178]}),{40:181,41:[1,182],43:[1,183]},{18:$Vk,22:$Vl,23:184,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:185,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{18:$Vk,22:$Vl,23:186,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},o($VP,[2,109]),o($VP,[2,108]),o($VP,[2,110]),o($VP,[2,112]),{24:[1,187],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($Ve,[2,101]),{9:190,18:[1,189],45:188,47:20},{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,26:[1,191],27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{8:[1,192]},{25:$Vh,28:193},o($Ve,[2,27],{22:[1,195],37:[1,194]}),{18:$Vk,22:$Vl,23:196,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{26:[1,197],41:[1,198],43:[1,199]},{42:[1,200]},{18:$Vk,22:$Vl,23:201,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{8:[2,82],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o([8,24,42,55,82,95],[2,81],{67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN}),{24:[1,202],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($VP,[2,113]),{24:[1,203]},o($Vi,$Vj,{19:[1,204],20:[1,205]}),{24:[2,40]},o($Ve,[2,17]),o($Ve,[2,18]),o($Ve,[2,26]),{25:$Vh,28:206},{18:$Vk,22:$Vl,23:207,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{24:[1,208],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($Ve,[2,31]),{42:[1,209]},{18:$Vk,22:$Vl,23:210,56:56,57:57,58:58,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:66,66:67,67:$Vs,72:$Vt,73:$Vu,97:72,98:73,99:74,100:75,101:76,102:$Vv,103:$Vw,104:$Vx,108:$Vy,109:$Vz},{2:$V0,4:211,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{42:[1,212],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},o($VP,[2,70]),{25:$Vh,28:213},{24:[2,38]},{24:[2,39]},o($Ve,[2,28]),{24:[1,214],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{25:$Vh,28:215},{2:$V0,4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{42:[1,217],67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,82:$VO},{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,26:[1,218],27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{2:$V0,4:219,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},o($Ve,[2,41]),{25:$Vh,28:220},o($VQ,[2,30]),{2:$V0,6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,26:[1,221],27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},{2:$V0,4:222,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,47:20,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd},o($Ve,[2,33]),o($VU,[2,35],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,47:20,6:29,2:$V0,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd}),o($VQ,[2,29]),o($Ve,[2,32]),o($VU,[2,34],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,47:20,6:29,2:$V0,17:$V1,18:$V2,21:$V3,27:$V4,36:$V5,39:$V6,46:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,94:$Vd})],
defaultActions: {28:[2,1],85:[2,36],86:[2,37],95:[2,43],97:[2,49],99:[2,44],100:[2,45],101:[2,46],102:[2,47],135:[2,83],136:[2,84],137:[2,85],138:[2,86],190:[2,40],204:[2,38],205:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const Nodo = require('./Nodo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario simple	
break;
case 1:   
break;
case 2://espacios en blanco
break;
case 3: 
break;
case 4:
break;
case 5:return "R_INT";
break;
case 6:return "R_DOUBLE";
break;
case 7:return  "R_TRUE"
break;
case 8:return  "R_FALSE"
break;
case 9:return "R_CHAR";
break;
case 10:return "R_CADENA";
break;
case 11:return "CASTEO";
break;
case 12:return "R_BOOL";
break;
case 13:return "COMA"; 
break;
case 14:return "IGUALDAD";
break;
case 15:return "IGUAL";
break;
case 16:return "PUNTOYCOMA";
break;
case 17:return "DOSPUNTOS";
break;
case 18:return "INTERROGACION";
break;
case 19:return 22;
break;
case 20:return 24;
break;
case 21:return "LLAVEABRE";
break;
case 22:return "LLAVECIERRA";
break;
case 23:return "CORCHETECIERRA";
break;
case 24:return "CORCHETEABRE";
break;
case 25:return "NEW";
break;
case 26:return "RESERVADAIF";
break;
case 27:return "RESELSE";
break;
case 28:return "SWITCH";
break;
case 29:return "CASE";
break;
case 30:return "RDEFAULT";
break;
case 31:return "RESERVADAWHILE";
break;
case 32:return "RFOR";
break;
case 33:return "RDO";
break;
case 34:return "RBREAK";
break;
case 35:return "RCONTINUE";
break;
case 36:return "RRETURN";
break;
case 37:return "VOID";
break;
case 38:return "COUT";
break;
case 39:return "ENDL";
break;
case 40:return "RTOLOWER";
break;
case 41:return "RTOUPPER";
break;
case 42:return "ROUND";
break;
case 43:return "LENGTH";
break;
case 44:return "TYPEOF";
break;
case 45:return "TOSTRING";
break;
case 46:return "C_STR";
break;
case 47:return "EXECUTE";
break;
case 48:return "INCREMENTO";
break;
case 49:return "MAS";
break;
case 50:return "DECREMENTO";
break;
case 51:return "MENOS";
break;
case 52:return "MULTIPLICACION"; 
break;
case 53:return "DIVISION";
break;
case 54:return "POTENCIA";
break;
case 55:return "MODULO";
break;
case 56:return "DIFERENTE";
break;
case 57:return "MENORIGUAL";
break;
case 58:return "MDOBLE";
break;
case 59:return "MENOR";
break;
case 60:return "MAYORIGUAL";
break;
case 61:return "MAYOR";
break;
case 62:return "OR";
break;
case 63:return "AND";
break;
case 64:return "NOT";
break;
case 65:return 18;
break;
case 66:return 61;
break;
case 67:return 59;
break;
case 68: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 70:return 5;
break;
case 71:return 17
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:std::)/i,/^(?:bool\b)/i,/^(?:,)/i,/^(?:==)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AST;
exports.Parser = AST.Parser;
exports.parse = function () { return AST.parse.apply(AST, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}