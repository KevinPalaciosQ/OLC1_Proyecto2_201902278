/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,14],$V2=[1,29],$V3=[1,25],$V4=[1,26],$V5=[1,23],$V6=[1,27],$V7=[1,28],$V8=[1,24],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,22],$Vf=[2,5,18,19,22,27,28,32,36,39,41,43,46,49,50,51,52,53,94],$Vg=[1,37],$Vh=[1,43],$Vi=[1,48],$Vj=[48,55],$Vk=[2,52],$Vl=[1,66],$Vm=[1,73],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,67],$Vs=[1,68],$Vt=[1,71],$Vu=[1,72],$Vv=[1,74],$Vw=[1,81],$Vx=[1,80],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,101],$VC=[1,107],$VD=[1,106],$VE=[1,108],$VF=[1,109],$VG=[1,110],$VH=[1,111],$VI=[1,112],$VJ=[1,113],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[8,25,42,55,67,68,69,70,71,74,75,76,77,78,79,80,81,82,95],$VR=[2,5,18,19,22,23,27,28,32,36,37,39,41,43,46,49,50,51,52,53,94],$VS=[8,25,42,55,74,75,81,82,95],$VT=[8,25,42,55,67,68,74,75,76,77,78,79,80,81,82,95],$VU=[8,25,42,55,74,75,76,77,78,79,80,81,82,95],$VV=[27,41,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"PUNTOYCOMA":8,"ASIGNACION":9,"FUNCIONCOUT":10,"INSTRUCCIONBREAK":11,"INSTRUCCIONFOR":12,"WHILEINS":13,"CICLODOWHILE":14,"SENTENCIAIF":15,"SENTENCIASWITCH":16,"AUMENTODECRE":17,"INVALID":18,"IDENTIFICADOR":19,"INCREMENTO":20,"DECREMENTO":21,"RESERVADAWHILE":22,"PARABRE":23,"EXPRESION":24,"PARCIERRA":25,"LLAVEABRE":26,"LLAVECIERRA":27,"RDO":28,"ENCAPSULAMIENTO":29,"INSTRUCCIONCONTINUE":30,"CONTINUE":31,"RBREAK":32,"INSTRUCCIONRETURN":33,"RETURN":34,"OPCIONES":35,"RESERVADAIF":36,"RESELSE":37,"LISTA_IF":38,"SWITCH":39,"LISTACASOS":40,"RDEFAULT":41,"DOSPUNTOS":42,"CASE":43,"TIPOSFOR":44,"ACTUALIZACIONFOR":45,"RFOR":46,"LISTA_IDENTIFICADORES":47,"IGUAL":48,"R_INT":49,"R_DOUBLE":50,"R_BOOL":51,"R_CHAR":52,"R_CADENA":53,"FUNCIONCASTEO":54,"COMA":55,"OPERACIONES":56,"OPERACIONESLOGICAS":57,"OPERACIONESRELACIONALES":58,"ENTERO":59,"CADENA":60,"DECIMAL":61,"CARACTER":62,"R_TRUE":63,"R_FALSE":64,"FUNCIONESVARIAS":65,"OPERADORTERNARIO":66,"MENOS":67,"MAS":68,"MULTIPLICACION":69,"DIVISION":70,"MODULO":71,"POTENCIA":72,"NOT":73,"OR":74,"AND":75,"MAYORIGUAL":76,"MAYOR":77,"MENORIGUAL":78,"MENOR":79,"IGUALDAD":80,"DIFERENTE":81,"INTERROGACION":82,"TIPODECLARACION":83,"FUNCIONESTRUCTURADATOS":84,"VECTORES":85,"ACCESOVECTORES":86,"MODIFICACIONVECTORES":87,"TIPOVECTOR":88,"CORCHETEABRE":89,"CORCHETECIERRA":90,"NEW":91,"LISTAVALORES":92,"ID":93,"COUT":94,"MDOBLE":95,"ENDL":96,"FUNCIONTOUPPER":97,"FUNCIONTOLOWER":98,"FUNCIONROUND":99,"FUNCIONTYPEOF":100,"FUNCIONTOSTRING":101,"RTOLOWER":102,"RTOUPPER":103,"ROUND":104,"FUNCIONLENGHT":105,"PUNTO":106,"LENGTH":107,"TYPEOF":108,"CASTEO":109,"TOSTRING":110,"FUNCIONCSTR":111,"C_STR":112,"FUNCIONEXECUTE":113,"EXECUTE":114,"LLAMADA":115,"METODOS":116,"VOID":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOYCOMA",18:"INVALID",19:"IDENTIFICADOR",20:"INCREMENTO",21:"DECREMENTO",22:"RESERVADAWHILE",23:"PARABRE",25:"PARCIERRA",26:"LLAVEABRE",27:"LLAVECIERRA",28:"RDO",31:"CONTINUE",32:"RBREAK",34:"RETURN",36:"RESERVADAIF",37:"RESELSE",39:"SWITCH",41:"RDEFAULT",42:"DOSPUNTOS",43:"CASE",46:"RFOR",48:"IGUAL",49:"R_INT",50:"R_DOUBLE",51:"R_BOOL",52:"R_CHAR",53:"R_CADENA",55:"COMA",59:"ENTERO",60:"CADENA",61:"DECIMAL",62:"CARACTER",63:"R_TRUE",64:"R_FALSE",67:"MENOS",68:"MAS",69:"MULTIPLICACION",70:"DIVISION",71:"MODULO",72:"POTENCIA",73:"NOT",74:"OR",75:"AND",76:"MAYORIGUAL",77:"MAYOR",78:"MENORIGUAL",79:"MENOR",80:"IGUALDAD",81:"DIFERENTE",82:"INTERROGACION",89:"CORCHETEABRE",90:"CORCHETECIERRA",91:"NEW",93:"ID",94:"COUT",95:"MDOBLE",96:"ENDL",102:"RTOLOWER",103:"RTOUPPER",104:"ROUND",106:"PUNTO",107:"LENGTH",108:"TYPEOF",109:"CASTEO",110:"TOSTRING",112:"C_STR",114:"EXECUTE",117:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[17,3],[17,3],[13,7],[14,7],[30,1],[11,1],[33,1],[33,2],[29,3],[29,2],[15,5],[15,7],[15,6],[15,8],[38,5],[38,4],[16,7],[16,10],[16,9],[40,5],[40,4],[44,1],[44,1],[45,2],[45,2],[45,1],[12,9],[9,3],[7,4],[7,4],[7,4],[7,4],[7,4],[35,1],[35,1],[47,3],[47,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,6],[56,3],[57,2],[57,3],[57,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[66,5],[54,4],[83,1],[83,1],[83,1],[83,1],[84,1],[84,1],[84,1],[85,11],[85,15],[85,9],[88,1],[88,1],[88,1],[88,1],[92,1],[86,4],[87,7],[87,10],[10,6],[10,4],[65,1],[65,1],[65,1],[65,1],[65,1],[98,4],[97,4],[99,4],[105,6],[100,4],[101,5],[111,6],[113,3],[116,7],[115,3],[115,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 24: case 72:
this.$=$$[$0-1];
break;
case 6: case 8: case 9: case 10: case 11: case 12: case 13: case 37: case 38: case 41: case 49: case 50: case 53: case 54: case 55: case 63: case 64: case 104: case 105: case 106: case 107: case 108:
this.$=$$[$0];
break;
case 14:
controller.listaErrores.push(new errores.default('ERROR LEXICO',$$[$0],_$[$0].first_line,_$[$0].first_column));console.log(INVALID);console.error('Este es un error léxico: ' + yytext + ', en la linea: ' + yylloc.first_line + ', en la columna: ' + yylloc.first_column);
break;
case 15:
controller.listaErrores.push(new errores.default(`ERROR SINTACTICO`,$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column));console.error(yytext +' Es un error sintáctico '+ ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 16:
this.$=new incremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 17:
this.$=new decremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 18:
this.$=new whileIns.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 19:
this.$= new insdowhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 25:
[];
break;
case 26:
this.$=new ifsito.default($$[$0-2],$$[$0],null,null,_$[$0-4].first_line,_$[$0-4].first_column);console.log("3");
break;
case 27:
this.$=new ifsito.default($$[$0-4],$$[$0-2],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);console.log("4");
break;
case 28:
this.$=new ifsito.default($$[$0-3],$$[$0-1],$$[$0],null,_$[$0-5].first_line,_$[$0-5].first_column);console.log("5");
break;
case 29:
this.$=new ifsito.default($$[$0-5],$$[$0-3],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);console.log("6");
break;
case 30:
$$[$0-4].push(new elsito.default($$[$0-1],$$[$01],_$[$0-4].first_line,_$[$0-4].first_column)); this.$=$$[$0-4]
break;
case 31:
this.$=[new elsito.default($$[$0-1],$$[$01],_$[$0-3].first_line,_$[$0-3].first_column)];
break;
case 32:
this.$=new inswitch.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);console.log("switch 1");
break;
case 33:
this.$= new inswitch.default($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);console.log("switch 2");
break;
case 34:
this.$= new inswitch.default($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);console.log("switch 3");
break;
case 35:
$$[$0-4].push(new caso.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)); this.$=$$[$0-4];console.log("caso a");
break;
case 36:
this.$=[new caso.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)];console.log("caso b");
break;
case 39:
this.$=new incremento.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 40:
this.$=new decremento.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 42:
this.$= new instruccionfor.default($$[$0-6],$$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);console.log("DECLARACION-ASIGNACION"+$$[$0-6]);console.log("EXPRESION-CONDICIONAL"+$$[$0-4]);console.log("ITERACION"+$$[$0-2]);console.log("ACTUALIZACION"+$$[$0]);
break;
case 43:
this.$=new asignacionv.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);console.log("soy asinacion");limpieza();
break;
case 44:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.ENTERO),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);limpieza();
break;
case 45:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.DECIMAL),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);limpieza();
break;
case 46:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);limpieza();
break;
case 47:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.CARACTER),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);limpieza();
break;
case 48:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.CADENA),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);limpieza();
break;
case 51:
agregarVariable($$[$0]);concatenacionl($$[$0-2]);this.$=obtenerVariable();
break;
case 52:
agregarVariable($$[$0]);this.$=obtenerVariable();
break;
case 56:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 57:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 58:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 59:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.CARACTER),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 60:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.IDENTIFICADOR),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 61: case 62:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 65:
this.$=new aritmetico.default(aritmetico.tipoOp.NEGACIONUNARIA,$$[$0],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 66:
this.$=new aritmetico.default(aritmetico.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 67:
this.$=new aritmetico.default(aritmetico.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 68:
this.$=new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 69:
this.$=new aritmetico.default(aritmetico.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 70:
this.$=new aritmetico.default(aritmetico.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 71:
this.$=new aritmetico.default(aritmetico.tipoOp.POTENCIA,$$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 73:
this.$=new logica.default(logica.tipoOp.NOT,$$[$0],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 74:
this.$=new logica.default(logica.tipoOp.OR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 75:
this.$=new logica.default(logica.tipoOp.AND,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 76:
this.$=new relacional.default(relacional.tipoOp.MAYOR_IGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 77:
this.$=new relacional.default(relacional.tipoOp.MAYOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 78:
this.$=new relacional.default(relacional.tipoOp.MENOR_IGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 79:
this.$=new relacional.default(relacional.tipoOp.MENOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 80:
this.$=new relacional.default(relacional.tipoOp.IGUALACION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 81:
this.$=new relacional.default(relacional.tipoOp.DIFERENCIACION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
this.$= new ternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);console.log("Ternario");
break;
case 83:
this.$=new tocast.default($$[$0],$$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 84:
this.$=new Tipo.default(Tipo.DataType.ENTERO);
break;
case 85:
this.$=new Tipo.default(Tipo.DataType.DECIMAL);
break;
case 86:
this.$=new Tipo.default(Tipo.DataType.CARACTER);
break;
case 87:
this.$=new Tipo.default(Tipo.DataType.CADENA);
break;
case 102:
this.$=new impresioncout.default($$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column,"saltoextra");
break;
case 103:
this.$=new impresioncout.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column,"");
break;
case 109:
this.$=new minuscula.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 110:
this.$=new mayuscula.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 111:
this.$=new aproximacion.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 113:
this.$=new tipoDe.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 114:
this.$=new acadena.default($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);console.log("ToString");
break;
case 117:
this.$=new vacio.default($$[$0-5],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{1:[3]},{2:$V0,5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},o($Vf,[2,3]),{8:[1,32]},{8:[1,33]},o($Vf,[2,6]),{8:[1,34]},o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{8:[1,35]},{19:$Vg,47:36},{19:$Vg,47:38},{19:$Vg,47:39},{19:$Vg,47:40},{19:$Vg,47:41},{48:[1,42],55:$Vh},{95:[1,44]},{8:[2,21]},{23:[1,45]},{23:[1,46]},{26:$Vi,29:47},{23:[1,49]},{23:[1,50]},o($Vj,$Vk,{20:[1,51],21:[1,52]}),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,7]),o($Vf,[2,15]),{48:[1,53],55:$Vh},o($Vj,$Vk),{48:[1,54],55:$Vh},{48:[1,55],55:$Vh},{48:[1,56],55:$Vh},{48:[1,57],55:$Vh},{19:$Vl,23:$Vm,24:58,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:[1,85]},{19:$Vl,23:$Vm,24:86,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{7:88,9:89,19:$Vg,44:87,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd},{19:$Vl,23:$Vm,24:90,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{22:[1,91]},{2:$V0,4:92,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,27:[1,93],28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{19:$Vl,23:$Vm,24:94,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:95,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{8:[1,96]},{8:[1,97]},{19:$Vl,23:$VB,24:99,35:98,54:100,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$VB,24:99,35:102,54:100,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$VB,24:99,35:103,54:100,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$VB,24:99,35:104,54:100,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$VB,24:99,35:105,54:100,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},o([8,25],[2,43],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP}),o($VQ,[2,53]),o($VQ,[2,54]),o($VQ,[2,55]),o($VQ,[2,56]),o($VQ,[2,57]),o($VQ,[2,58]),o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),o($VQ,[2,63]),o($VQ,[2,64]),{19:$Vl,23:$Vm,24:120,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{23:[1,121]},{19:$Vl,23:$Vm,24:122,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:123,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},o($VQ,[2,104]),o($VQ,[2,105]),o($VQ,[2,106]),o($VQ,[2,107]),o($VQ,[2,108]),{23:[1,124]},{23:[1,125]},{23:[1,126]},{23:[1,127]},{110:[1,128]},o($Vj,[2,51]),{8:[1,130],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,95:[1,129]},{8:[1,131]},{8:[2,37]},{8:[2,38]},{25:[1,132],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{23:[1,133]},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,27:[1,134],28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},o($VR,[2,25]),{25:[1,135],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{25:[1,136],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($Vf,[2,16]),o($Vf,[2,17]),{8:[2,44]},{8:[2,49],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{8:[2,50]},{19:$Vl,23:$Vm,24:122,49:[1,138],50:[1,139],52:[1,140],53:[1,141],56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,83:137,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{8:[2,45]},{8:[2,46]},{8:[2,47]},{8:[2,48]},{19:$Vl,23:$Vm,24:142,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:143,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:144,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:145,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:146,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:147,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:148,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:149,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:150,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:151,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:152,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:153,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:154,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:155,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},o($VQ,[2,65]),{19:$Vl,23:$Vm,24:156,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{25:[1,157],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($VS,[2,73],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN}),{19:$Vl,23:$Vm,24:158,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:159,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:160,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:161,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{23:[1,162]},{96:[1,163]},o($Vf,[2,103]),{19:$Vl,23:$Vm,24:164,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{26:[1,165]},{19:$Vl,23:$Vm,24:166,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},o($VR,[2,24]),{26:$Vi,29:167},{26:[1,168]},{25:[1,169]},{25:[2,84]},{25:[2,85]},{25:[2,86]},{25:[2,87]},o($VT,[2,66],{69:$VE,70:$VF,71:$VG}),o($VT,[2,67],{69:$VE,70:$VF,71:$VG}),o($VQ,[2,68]),o($VQ,[2,69]),o($VQ,[2,70]),o([8,25,42,55,74,82,95],[2,74],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o([8,25,42,55,74,75,82,95],[2,75],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),o($VU,[2,76],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VU,[2,77],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VU,[2,78],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VU,[2,79],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o([8,25,42,55,74,75,80,81,82,95],[2,80],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,76:$VJ,77:$VK,78:$VL,79:$VM}),o($VS,[2,81],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN}),{42:[1,170],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{55:[1,171],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($VQ,[2,72]),{25:[1,172],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{25:[1,173],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{25:[1,174],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{25:[1,175],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{19:$Vl,23:$Vm,24:176,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{8:[1,177]},{8:[1,178],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{2:$V0,4:179,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{25:[1,180],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($Vf,[2,26],{38:182,23:[1,183],37:[1,181]}),{40:184,41:[1,185],43:[1,186]},{19:$Vl,23:$Vm,24:187,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:188,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{19:$Vl,23:$Vm,24:189,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},o($VQ,[2,110]),o($VQ,[2,109]),o($VQ,[2,111]),o($VQ,[2,113]),{25:[1,190],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($Vf,[2,102]),{9:193,19:[1,192],45:191,47:21},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,27:[1,194],28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{8:[1,195]},{26:$Vi,29:196},o($Vf,[2,28],{23:[1,198],37:[1,197]}),{19:$Vl,23:$Vm,24:199,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{27:[1,200],41:[1,201],43:[1,202]},{42:[1,203]},{19:$Vl,23:$Vm,24:204,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{8:[2,83],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o([8,25,42,55,82,95],[2,82],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO}),{25:[1,205],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($VQ,[2,114]),{25:[1,206]},o($Vj,$Vk,{20:[1,207],21:[1,208]}),{25:[2,41]},o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,27]),{26:$Vi,29:209},{19:$Vl,23:$Vm,24:210,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{25:[1,211],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($Vf,[2,32]),{42:[1,212]},{19:$Vl,23:$Vm,24:213,56:59,57:60,58:61,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:69,66:70,67:$Vt,72:$Vu,73:$Vv,97:75,98:76,99:77,100:78,101:79,102:$Vw,103:$Vx,104:$Vy,108:$Vz,109:$VA},{2:$V0,4:214,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{42:[1,215],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},o($VQ,[2,71]),{26:$Vi,29:216},{25:[2,39]},{25:[2,40]},o($Vf,[2,29]),{25:[1,217],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{26:$Vi,29:218},{2:$V0,4:219,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{42:[1,220],67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP},{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,27:[1,221],28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{2:$V0,4:222,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},o($Vf,[2,42]),{26:$Vi,29:223},o($VR,[2,31]),{2:$V0,6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,27:[1,224],28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},{2:$V0,4:225,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,47:21,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve},o($Vf,[2,34]),o($VV,[2,36],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,47:21,6:31,2:$V0,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve}),o($VR,[2,30]),o($Vf,[2,33]),o($VV,[2,35],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,47:21,6:31,2:$V0,18:$V1,19:$V2,22:$V3,28:$V4,32:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,94:$Ve})],
defaultActions: {23:[2,21],30:[2,1],88:[2,37],89:[2,38],98:[2,44],100:[2,50],102:[2,45],103:[2,46],104:[2,47],105:[2,48],138:[2,84],139:[2,85],140:[2,86],141:[2,87],193:[2,41],207:[2,39],208:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//importaciones
const controller = require("../../../controller/parser/parser");//Lista de Errores 
const errores = require("./Exceptions/Error");
const nativo = require('./Expresions/Native');
const aritmetico = require('./Expresions/Aritmetica');
const relacional = require('./Expresions/Relacional');
const logica = require('./Expresions/Logica');
const Tipo = require("./Symbol/Type");
const impresioncout = require('./Instructions/Cout');   
const ifIns = require('./Instructions/Instruccionif');
const declaracion = require('./Instructions/Declaracion');
const asignacionv = require('./Instructions/Asignacion');
const whileIns = require('./Instructions/Mientras');
const incremento = require('./Instructions/Incremento');
const decremento = require('./Instructions/Decremento');
const mayuscula = require('./Instructions/Mayuscula');
const minuscula = require('./Instructions/Minuscula');
const aproximacion = require('./Instructions/Aproximacion');
const tipoDe = require('./Instructions/TO');
const acadena = require('./Instructions/ToString');
const ifsito = require('./Instructions/SentenciaIf');
const elsito = require('./Instructions/Else');
const inswitch = require('./Instructions/SentenciaSwitch');
const caso = require('./Instructions/Caso');
const tocast = require('./Instructions/Casteo');
const insdowhile = require('./Instructions/DuWhile');
const ternario = require('./Instructions/Operadorternario');
//const Break = require('./Instructions/BreakAuxiliar');
const { agregarVariable, obtenerVariable, concatenacionl, limpieza } =require("./Instructions/identificadores");
const instruccionfor = require('./Instructions/Instfor');
const vacio =require('./Instructions/Void');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario simple	
break;
case 1:   
break;
case 2://espacios en blanco
break;
case 3: 
break;
case 4:
break;
case 5:return "R_INT";
break;
case 6:return "R_DOUBLE";
break;
case 7:return  "R_TRUE"
break;
case 8:return  "R_FALSE"
break;
case 9:return "R_CHAR";
break;
case 10:return "R_CADENA";
break;
case 11:return "CASTEO";
break;
case 12:return "R_BOOL";
break;
case 13:return "COMA"; 
break;
case 14:return "IGUALDAD";
break;
case 15:return "IGUAL";
break;
case 16:return "PUNTOYCOMA";
break;
case 17:return "DOSPUNTOS";
break;
case 18:return "INTERROGACION";
break;
case 19:return 23;
break;
case 20:return 25;
break;
case 21:return "LLAVEABRE";
break;
case 22:return "LLAVECIERRA";
break;
case 23:return "CORCHETECIERRA";
break;
case 24:return "CORCHETEABRE";
break;
case 25:return "NEW";
break;
case 26:return "RESERVADAIF";
break;
case 27:return "RESELSE";
break;
case 28:return "SWITCH";
break;
case 29:return "CASE";
break;
case 30:return "RDEFAULT";
break;
case 31:return "RESERVADAWHILE";
break;
case 32:return "RFOR";
break;
case 33:return "RDO";
break;
case 34:return "RBREAK";
break;
case 35:return "RCONTINUE";
break;
case 36:return "RRETURN";
break;
case 37:return "VOID";
break;
case 38:return "COUT";
break;
case 39:return "ENDL";
break;
case 40:return "RTOLOWER";
break;
case 41:return "RTOUPPER";
break;
case 42:return "ROUND";
break;
case 43:return "LENGTH";
break;
case 44:return "TYPEOF";
break;
case 45:return "TOSTRING";
break;
case 46:return "C_STR";
break;
case 47:return "EXECUTE";
break;
case 48:return "INCREMENTO";
break;
case 49:return "MAS";
break;
case 50:return "DECREMENTO";
break;
case 51:return "MENOS";
break;
case 52:return "MULTIPLICACION"; 
break;
case 53:return "DIVISION";
break;
case 54:return "POTENCIA";
break;
case 55:return "MODULO";
break;
case 56:return "DIFERENTE";
break;
case 57:return "MENORIGUAL";
break;
case 58:return "MDOBLE";
break;
case 59:return "MENOR";
break;
case 60:return "MAYORIGUAL";
break;
case 61:return "MAYOR";
break;
case 62:return "OR";
break;
case 63:return "AND";
break;
case 64:return "NOT";
break;
case 65:return 19;
break;
case 66:return 61;
break;
case 67:return 59;
break;
case 68: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 70:return 5;
break;
case 71:return 18
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:std::)/i,/^(?:bool\b)/i,/^(?:,)/i,/^(?:==)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}