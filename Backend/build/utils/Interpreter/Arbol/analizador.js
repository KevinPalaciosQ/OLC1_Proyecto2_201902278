/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,19],$V3=[1,12],$V4=[1,18],$V5=[1,22],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,20],$Vc=[2,5,14,15,19,22,26,28,31,32,33,34,73,77],$Vd=[1,51],$Ve=[1,52],$Vf=[1,46],$Vg=[1,45],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,59],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[8,24,36,38,39,40,41,42,50,51,52,53,54,55,56,57],$VD=[8,24,36,55,56,57],$VE=[8,24,36,38,39,50,51,52,53,54,55,56,57],$VF=[8,24,36,50,51,52,53,54,55,56,57],$VG=[2,18],$VH=[1,128];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"PUNTOYCOMA":8,"FUNCIONCOUT":9,"WHILEINS":10,"AUMENTO":11,"FUNCIONTOUPPER":12,"IFINS":13,"INVALID":14,"IDENTIFICADOR":15,"INCREMENTO":16,"DECREMENTO":17,"ASIGNACION":18,"R_INT":19,"IGUAL":20,"EXPRESION":21,"RESERVADAWHILE":22,"PARABRE":23,"PARCIERRA":24,"LLAVEABRE":25,"LLAVECIERRA":26,"SIMPLEIF":27,"RESERVADAIF":28,"ELSEIFINS":29,"RESELSE":30,"R_DOUBLE":31,"R_BOOL":32,"R_CHAR":33,"R_CADENA":34,"LISTA_IDENTIFICADORES":35,"COMA":36,"TDD":37,"MAS":38,"MENOS":39,"DIVISION":40,"MULTIPLICACION":41,"MODULO":42,"POTENCIA":43,"ENTERO":44,"CADENA":45,"DECIMAL":46,"CARACTER":47,"R_TRUE":48,"R_FALSE":49,"MAYOR":50,"MAYORIGUAL":51,"MENOR":52,"MENORIGUAL":53,"IGUALDAD":54,"DIFERENTE":55,"OR":56,"AND":57,"NOT":58,"FUNCIONESUPERLOWER":59,"FUNCIONCASTEO":60,"TIPOCASTEO":61,"FUNCIONAUMENTODECREMENTO":62,"FUNCIONESTRUCTURADATOS":63,"VECTORES":64,"ACCESOVECTORES":65,"MODIFICACIONVECTORES":66,"TIPOVECTOR":67,"CORCHETEABRE":68,"CORCHETECIERRA":69,"NEW":70,"LISTAVALORES":71,"ID":72,"COUT":73,"ENDL":74,"FUNCIONTOLOWER":75,"TOLOWER":76,"TOUPPER":77,"FUNCIONROUND":78,"ROUND":79,"FUNCIONLENGHT":80,"PUNTO":81,"LENGTH":82,"FUNCIONTYPEOF":83,"TYPEOF":84,"FUNCIONTOSTRING":85,"TOSTRING":86,"FUNCIONCSTR":87,"C_STR":88,"FUNCIONEXECUTE":89,"EXECUTE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOYCOMA",14:"INVALID",15:"IDENTIFICADOR",16:"INCREMENTO",17:"DECREMENTO",19:"R_INT",20:"IGUAL",22:"RESERVADAWHILE",23:"PARABRE",24:"PARCIERRA",25:"LLAVEABRE",26:"LLAVECIERRA",28:"RESERVADAIF",30:"RESELSE",31:"R_DOUBLE",32:"R_BOOL",33:"R_CHAR",34:"R_CADENA",36:"COMA",38:"MAS",39:"MENOS",40:"DIVISION",41:"MULTIPLICACION",42:"MODULO",43:"POTENCIA",44:"ENTERO",45:"CADENA",46:"DECIMAL",47:"CARACTER",48:"R_TRUE",49:"R_FALSE",50:"MAYOR",51:"MAYORIGUAL",52:"MENOR",53:"MENORIGUAL",54:"IGUALDAD",55:"DIFERENTE",56:"OR",57:"AND",58:"NOT",68:"CORCHETEABRE",69:"CORCHETECIERRA",70:"NEW",72:"ID",73:"COUT",74:"ENDL",76:"TOLOWER",77:"TOUPPER",79:"ROUND",81:"PUNTO",82:"LENGTH",84:"TYPEOF",86:"TOSTRING",88:"C_STR",90:"EXECUTE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[11,3],[11,3],[18,5],[10,7],[13,1],[13,12],[27,7],[29,3],[29,2],[7,4],[7,4],[7,4],[7,4],[7,4],[35,3],[35,1],[37,1],[37,1],[37,1],[37,1],[37,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,6],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[60,4],[61,1],[61,1],[61,1],[61,1],[62,4],[62,4],[63,1],[63,1],[63,1],[64,11],[64,15],[64,9],[67,1],[67,1],[67,1],[67,1],[71,1],[65,4],[66,7],[66,10],[9,5],[9,8],[59,1],[59,1],[75,5],[12,5],[78,5],[80,6],[83,5],[85,6],[87,6],[89,5],[89,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 20: case 27:
this.$=[$$[$0]];
break;
case 4:
this.$=$$[$0-1]
break;
case 5: case 6: case 7: case 8: case 9: case 16: case 57: case 81: case 82:
this.$=$$[$0];
break;
case 10:
controller.listaErrores.push(new errores.default('ERROR LEXICO',$$[$0],_$[$0].first_line,_$[$0].first_column));
break;
case 11:
controller.listaErrores.push(new errores.default(`ERROR SINTACTICO`,"Se esperaba token",_$[$0-1].first_line,_$[$0-1].first_column));
break;
case 12:
this.$=new incremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 13:
this.$=new decremento.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 14:
this.$=new asignacionv.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 15:
this.$=new whileIns.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 17:
this.$=new ifIns.default($$[$0-9],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 18:
this.$=new ifIns.default($$[$0-4],$$[$0-1], undefined, undefined, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 19: case 26:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 21:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.ENTERO),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 22:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.DECIMAL),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 23:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 24:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.CARACTER),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 25:
this.$=new declaracion.default($$[$0-2],new Tipo.default(Tipo.DataType.CADENA),$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 28: case 40:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 29: case 42:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 30: case 46: case 47:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 31: case 43:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.CARACTER),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 32: case 41:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 33:
this.$=new aritmetico.default(aritmetico.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 34:
this.$=new aritmetico.default(aritmetico.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 35:
this.$=new aritmetico.default(aritmetico.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 36:
this.$=new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 37:
this.$=new aritmetico.default(aritmetico.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 38:
this.$=new aritmetico.default(aritmetico.tipoOp.POTENCIA,$$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 39:
this.$=new aritmetico.default(aritmetico.tipoOp.NEGACIONUNARIA,$$[$0],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 44:
this.$=new nativo.default(new Tipo.default(Tipo.DataType.IDENTIFICADOR),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 45:
this.$=$$[$0-1];
break;
case 48:
this.$=new relacional.default(relacional.tipoOp.MAYOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49:
this.$=new relacional.default(relacional.tipoOp.MAYOR_IGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 50:
this.$=new relacional.default(relacional.tipoOp.MENOR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:
this.$=new relacional.default(relacional.tipoOp.MENOR_IGUAL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 52:
this.$=new relacional.default(relacional.tipoOp.IGUALACION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 53:
this.$=new relacional.default(relacional.tipoOp.DIFERENCIACION,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 54:
this.$=new logica.default(logica.tipoOp.OR,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 55:
this.$=new logica.default(logica.tipoOp.AND,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 56:
this.$=new logica.default(logica.tipoOp.NOT,$$[$0],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 79:
this.$=new impresioncout.default($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column,"");
break;
case 80:
this.$=new impresioncout.default($$[$0-4],_$[$0-7].first_line,_$[$0-7].first_column,"saltoextra");
break;
case 84:
this.$=new mayuscula.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{1:[3]},{2:$V0,5:[1,23],6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},o($Vc,[2,3]),{8:[1,25]},o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),{8:[1,26]},{15:[1,27]},{15:[1,28]},{15:[1,29]},{15:[1,30]},{15:[1,31]},{52:[1,32]},{23:[1,33]},{16:[1,34],17:[1,35]},{23:[1,36]},o($Vc,[2,16]),{23:[1,37]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,11]),{20:[1,38]},{20:[1,39]},{20:[1,40]},{20:[1,41]},{20:[1,42]},{52:[1,43]},{12:57,15:$Vd,21:44,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{8:[1,60]},{8:[1,61]},{12:57,15:$Vd,21:62,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:63,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:64,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:65,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:66,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:67,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:68,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:69,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{24:[1,70],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{23:[1,84]},{12:57,15:$Vd,21:85,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},o($VC,[2,40]),o($VC,[2,41]),o($VC,[2,42]),o($VC,[2,43]),o($VC,[2,44]),{12:57,15:$Vd,21:86,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},o($VC,[2,46]),o($VC,[2,47]),{12:57,15:$Vd,21:87,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},o($VC,[2,57]),o($VC,[2,81]),o($VC,[2,82]),{23:[1,88]},o($Vc,[2,12]),o($Vc,[2,13]),{24:[1,89],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{24:[1,90],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{8:[2,21],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{8:[2,22],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{8:[2,23],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{8:[2,24],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{8:[2,25],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{8:[1,91],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:[1,92],53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{25:[1,93]},{12:57,15:$Vd,21:94,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:95,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:96,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:97,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:98,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:99,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:100,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:101,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:102,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:103,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:104,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:105,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:106,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{12:57,15:$Vd,21:107,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},o($VC,[2,39]),{24:[1,108],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($VD,[2,56],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy}),{12:57,15:$Vd,21:109,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{8:[1,110]},{25:[1,111]},o($Vc,[2,79]),{12:57,15:$Vd,21:101,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,52:[1,112],58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{2:$V0,4:113,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},o($VE,[2,33],{40:$Vr,41:$Vs,42:$Vt}),o($VE,[2,34],{40:$Vr,41:$Vs,42:$Vt}),o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),o($VF,[2,48],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt}),o($VF,[2,49],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt}),o($VF,[2,50],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt}),o($VF,[2,51],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt}),o([8,24,36,54,55,56,57],[2,52],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx}),o($VD,[2,53],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy}),o([8,24,36,56],[2,54],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,57:$VB}),o([8,24,36,56,57],[2,55],{38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz}),{36:[1,114],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($VC,[2,45]),{24:[1,115],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o([2,5,8,14,15,19,22,24,26,28,31,32,33,34,36,38,39,40,41,42,50,51,52,53,54,55,56,57,73,77],[2,84]),{2:$V0,4:116,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{74:[1,117]},{2:$V0,6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,26:[1,118],27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{12:57,15:$Vd,21:119,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{8:[1,120]},{2:$V0,6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,26:[1,121],27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{8:[1,122]},o($Vc,[2,15]),{24:[1,123],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($VC,[2,83]),o($Vc,$VG,{29:124,30:[1,125]}),o($Vc,[2,80]),o($VC,[2,38]),{30:[1,126]},{27:127,28:$VH},{25:[1,129],27:130,28:$VH},{30:[2,20]},{23:[1,131]},{2:$V0,4:132,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{30:[2,19]},{12:57,15:$Vd,21:133,23:$Ve,39:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,58:$Vn,59:56,75:58,76:$Vo,77:$Vb},{2:$V0,6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,26:[1,134],27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{24:[1,135],38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($Vc,[2,17]),{25:[1,136]},{2:$V0,4:137,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{2:$V0,6:24,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,19:$V3,22:$V4,26:[1,138],27:21,28:$V5,31:$V6,32:$V7,33:$V8,34:$V9,73:$Va,77:$Vb},{30:$VG}],
defaultActions: {23:[2,1],127:[2,20],130:[2,19],138:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//importaciones
const controller = require("../../../controller/parser/parser");//Lista de Errores 
const errores = require("./Exceptions/Error");
const nativo = require('./Expresions/Native');
const aritmetico = require('./Expresions/Aritmetica');
const relacional = require('./Expresions/Relacional');
const logica = require('./Expresions/Logica');
const Tipo = require("./Symbol/Type");
const impresioncout = require('./Instructions/Cout');   
const ifIns = require('./Instructions/Instruccionif');
const declaracion = require('./Instructions/Declaracion');
const asignacionv = require('./Instructions/Asignacion');
const whileIns = require('./Instructions/Mientras');
const incremento = require('./Instructions/Incremento');
const decremento = require('./Instructions/Decremento');
const mayuscula = require('./Instructions/Mayuscula');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario simple	
break;
case 1:   
break;
case 2://espacios en blanco
break;
case 3: 
break;
case 4:
break;
case 5:return "R_INT";
break;
case 6:return "R_DOUBLE";
break;
case 7:return  "R_TRUE"
break;
case 8:return  "R_FALSE"
break;
case 9:return "R_CHAR";
break;
case 10:return "R_CADENA";
break;
case 11:return "R_BOOL";
break;
case 12:return "COMA"; 
break;
case 13:return "IGUALDAD";
break;
case 14:return "IGUAL";
break;
case 15:return "PUNTOYCOMA";
break;
case 16:return "DOSPUNTOS";
break;
case 17:return "INTERROGACION";
break;
case 18:return 23;
break;
case 19:return 24;
break;
case 20:return "LLAVEABRE";
break;
case 21:return "LLAVECIERRA";
break;
case 22:return "CORCHETECIERRA";
break;
case 23:return "CORCHETEABRE";
break;
case 24:return "NEW";
break;
case 25:return "RESERVADAIF";
break;
case 26:return "RESELSE";
break;
case 27:return "SWITCH";
break;
case 28:return "CASE";
break;
case 29:return "DEFAULT";
break;
case 30:return "RESERVADAWHILE";
break;
case 31:return "FOR";
break;
case 32:return "DO";
break;
case 33:return "BREAK";
break;
case 34:return "CONTINUE";
break;
case 35:return "RETURN";
break;
case 36:return "VOID";
break;
case 37:return "COUT";
break;
case 38:return "ENDL";
break;
case 39:return "TOLOWER";
break;
case 40:return "TOUPPER";
break;
case 41:return "ROUND";
break;
case 42:return "LENGTH";
break;
case 43:return "TYPEOF";
break;
case 44:return "TOSTRING";
break;
case 45:return "C_STR";
break;
case 46:return "EXECUTE";
break;
case 47:return "INCREMENTO";
break;
case 48:return "MAS";
break;
case 49:return "DECREMENTO";
break;
case 50:return "MENOS";
break;
case 51:return "MULTIPLICACION"; 
break;
case 52:return "DIVISION";
break;
case 53:return "POTENCIA";
break;
case 54:return "MODULO";
break;
case 55:return "DIFERENTE";
break;
case 56:return "MENORIGUAL";
break;
case 57:return "MENOR";
break;
case 58:return "MAYORIGUAL";
break;
case 59:return "MAYOR";
break;
case 60:return "OR";
break;
case 61:return "AND";
break;
case 62:return "NOT";
break;
case 63:return 15;
break;
case 64:return 46;
break;
case 65:return 44;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 47; 
break;
case 67: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 45; 
break;
case 68:return 5;
break;
case 69:return 14
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:bool\b)/i,/^(?:,)/i,/^(?:==)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}